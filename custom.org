#+TITLE: Denis Evsyukov Emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration

** About this file
<<babel-init>>

Inspired by the [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]], I set up my configuration file using Org-babel.

To be precise, this is what's in the first part of my =~/.emacs=:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'cl-lib)
  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq package-enable-at-startup nil)
  (org-babel-load-file "~/.custom.org")
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq  user-full-name "Denis Evsyukov"
         user-mail-address "denis@evsyukov.org")
#+END_SRC

** Emacs initialization

*** Load use-package

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
;;  (load "~/.emacs.d/elpa/benchmark-init-20141004.609/benchmark-init.el")
#+END_SRC

*** Use auto-compile

From https://github.com/tarsius/auto-compile

Dont show buffer *Compile-log*
#+BEGIN_SRC emacs-lisp
  (setq auto-compile-display-buffer nil)
  (setq auto-compile-mode-line-counter t)
#+END_SRC

*** Load secrets

I keep slightly more sensitive information in a separate file so that I can easily publish my main configuration.

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.secrets" t)
#+END_SRC

** General configuration

*** Backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** History

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC

*** Dont follow link

#+BEGIN_SRC emacs-lisp
  (setq-default vc-follow-symlinks nil)
#+END_SRC

*** Windows configuration

When you're starting out, tooltips, menus, and the tool bar can be very helpful. [[http://sachachua.com/blog/2014/03/emacs-basics-using-mouse/][(Emacs Basics: Using the Mouse]]). Eventually, you may want to reclaim that extra little bit of screenspace. The following code turns those things off when using a graphical Emacs.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
#+END_SRC

Startup Messages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        inhbit-startup-message t
        initial-scratch-message ""
        inhibit-startup-echo-area-message t)
#+END_SRC

Window size and font size.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (set-frame-size (selected-frame) 170 50)
    (set-default-font "Consolas 13" nil t)
  )
#+END_SRC

OSX Specific
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
      (set-default-font "Inconsolata 15" nil t)
      (set-frame-size (selected-frame) 160 54)
      (setq mac-command-modifier 'meta)
      (define-key global-map [home] 'juev/smarter-move-beginning-of-line)
      (define-key global-map [end] 'end-of-line)
      ;; (setq ns-use-srgb-colorspace nil)
      )
#+END_SRC

Non blink cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

*** Sentences end with a single space

In my world, sentences end with a single space. This makes sentence navigation commands work for me.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

*** Change "yes or no" to "y or n"

Lazy people like me never want to type "yes" when "y" will suffice.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Disable bell

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Color theme

#+BEGIN_SRC emacs-lisp
;;  (load-theme 'misterioso t)
#+END_SRC

*** Help - guide-key

It's hard to remember keyboard shortcuts. The =guide-key= package pops up help after a short delay.

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :ensure t
    :diminish guide-key-mode
    :init
    (progn
      (setq guide-key/guide-key-sequence '("C-x" "C-c"))
      (guide-key-mode 1)))
#+END_SRC

*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  (setq-default buffer-file-coding-system 'utf-8-unix)
#+END_SRC

*** Configure the keyboard
**** Russian keycode

#+BEGIN_SRC emacs-lisp
  (setq default-input-method "russian-computer")
#+END_SRC

**** Global keycode

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

**** Disable Tab

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** iBuffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Packages

*** ido-vertical-mode

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (progn
      (ido-mode t)
      (ido-vertical-mode 1)
      (setq ido-ignore-buffers '("^ " "*Completions*" "*Shell Command Output*"
                                 "*Messages*" "Async Shell Command"))
      (setq ido-enable-flex-matching t
            ido-use-virtual-buffers t)))
#+END_SRC

** Org

I use [[http://www.orgmode.org][Org Mode]] to take notes, publish my blog, and do all sorts of stuff.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :diminish org-mode
    :init
    (progn
      (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
      (setq default-major-mode 'org-mode
            org-directory "~/Google Drive/Org/"
            org-agenda-inhibit-startup t
            org-agenda-use-tag-inheritance nil
            org-log-done t
            org-startup-indented nil
            org-startup-truncated nil
            org-startup-with-inline-images t
            org-completion-use-ido t
            org-default-notes-file (concat org-directory "/notes.org")
            org-goto-interface 'outline-path-completion
            org-capture-templates
            '(("t" "Todo" entry (file+headline (concat org-directory "/tasks.org") "Tasks")
               "* TODO %?\n")
              ("j" "Journal" plain (file+datetree (concat org-directory "/journal.org"))
               "* %?\nEntered on %U\n")
              ("n" "Notes" entry (file+headline (concat org-directory "/notes.org") "Notes")
               "* %U %?\n\n")
              ("n" "Daily note" table-line (file+olp (concat org-directory "/notes.org") "Daily notes")
               "| %u | %^{Note} |"
               :immediate-finish t))
            org-agenda-files (list (concat org-directory "/tasks.org")
                                   (concat org-directory "/notes.org")))))
#+END_SRC

*** Flycheck use hunspell

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/bin/hunspell")
#+END_SRC

** Coding

*** Tab width of 2 is compact and readable

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

*** New lines are always indented

I almost always want to go to the right indentation on the next line.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Show column number

I sometimes need to know where I am in a line.
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

*** Markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md$". markdown-mode))
#+END_SRC
